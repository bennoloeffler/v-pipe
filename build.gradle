plugins {
    id 'idea'
    id 'groovy'
    id 'com.github.johnrengelman.shadow' version '4.0.4' // fat jar
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib' // not needed any more
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

dependencies {
    implementation 'org.apache.ivy:ivy:2.5.0' // for plugins apache excel adapter
    implementation 'joda-time:joda-time:2.10.14'
    implementation 'org.codehaus.groovy:groovy-all:3.0.12'
    implementation group: 'org.codehaus.groovy', name: 'groovy-dateutil', version: '3.0.12'
    implementation group: 'org.codehaus.groovy', name: 'groovy-yaml', version: '3.0.12'
    implementation 'org.tinylog:tinylog-impl:2.4.1'
    implementation 'org.tinylog:tinylog-api:2.4.1'
    implementation group: 'com.formdev', name: 'flatlaf', version: '2.4'
    implementation 'com.miglayout:miglayout-swing:11.0'
    implementation group: 'org.codehaus.gpars', name: 'gpars', version: '1.2.1'
    implementation 'org.pcollections:pcollections:3.1.4'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.30'
    implementation 'commons-io:commons-io:2.11.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.1-groovy-3.0'
}

static def getOsName() {
    String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("linux")) {
        return ("linux")
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return ("macos")
    } else if (osName.contains("windows")) {
        return ("windows")
    } else if (osName.contains("sunos") || osName.contains("solaris")) {
        return ("solaris")
    } else if (osName.contains("freebsd")) {
        return ("freebsd")
    }
    return ("unix")
}


ext.VIPE_RELEASE = null

String vPipeRelease() {
    if (ext.VIPE_RELEASE == null) {
        ext.VIPE_RELEASE = rootProject.file('src/main/resources/version.txt').text.trim()
    }
    ext.VIPE_RELEASE
}

println "Running gradle version: $gradle.gradleVersion"
println "native os.name = " + System.getProperty("os.name").toLowerCase()
println "building RELEASE: " + vPipeRelease()
println "updated"

def copyLibsTask(os){
    return tasks.create("copyLibsJRE_${os}"){

        def version = rootProject.file('src/main/resources/version.txt').text.trim()
        String distDir = "$buildDir/dist/$os"
        String distributionsDir = "$buildDir/distributions/$os"
        String releaseDir = "$distDir/v-pipe-" + version
        String exampleDir = "$releaseDir/bsp-daten"
        String newModelDir = "$releaseDir/new-model"

        dependsOn test
        dependsOn shadowJar

        description "copies $os jre and v-pipe-lib to $releaseDir"
        group "v-pipe"

        doFirst {

            delete distributionsDir
            delete distDir
            delete releaseDir
            mkdir releaseDir

            def fs = new File("ersterStart.md")
            fs.delete()
            fs.createNewFile()
            fs << "ein Hinweis fÃ¼r v-pipe, dass der erste Start noch bevorsteht"
        }

        doLast {

            copy {
                from "bsp-daten"
                into exampleDir
            }

            copy {
                from "new-model"
                into newModelDir
            }

            copy {
                from "Readme.md"
                into releaseDir
            }

            if (os == "macos") {
                copy {
                    from "dock-icon.png"
                    into releaseDir
                }
            }

            copy {
                from "Readme.html.url"
                into releaseDir
            }

            copy {
                from "Referenz.html"
                into releaseDir
            }

            copy {
                from "ersterStart.md"
                into releaseDir
            }

            if (os == "macos") {
                copy {
                    from "v-pipe-macos.sh.command"
                    into releaseDir
                }
            }


            if (os == "linux") {
                copy {
                    from "v-pipe-linux.sh"
                    into releaseDir
                }
            }

            if (os == "windows") {
                copy {
                    from "v-pipe-win.bat"
                    into releaseDir
                }
            }

            copy {
                def jrePath = ""
                if(os == "windows") {jrePath = "JDKs/windows/jdk-11.0.12"}
                else if (os == "macos") {jrePath = "JDKs/macos/11.0.15-librca"}
                else if (os == "linux") {jrePath = "JDKs/linux/11.0.12-open"}
                else {println "ERROR: no JDK for os $os"}
                if(!new File(jrePath).exists()) {
                    println "ERROR: jre does not exist: $jrePath"
                    println "link or copy, so that JDKs folder will be found in project v-pipe"
                }
                //println"copy JRE... may take a while ($jrePath)"
                //println"to ($releaseDir)"
                from jrePath
                into "$releaseDir/jre"
            }

            // FAT JAR built with shadowJar
            copy {
                from "build/libs/v-pipe.jar"
                into "$releaseDir/lib/"
            }
        }
    }
}

task copyLibsJRE_ALL {
    description "copies all jre and v-pipe-lib to their releaseDirs"
    dependsOn copyLibsTask("linux"), copyLibsTask("windows"), copyLibsTask("macos")
    group "v-pipe"
}

def createDistribution(os){
    return tasks.create("createDistribution_${os}", Zip) {
        setArchiveFileName("v-pipe-${vPipeRelease()}-${os}.zip")
        into("v-pipe-${vPipeRelease()}")
        description os+ ': creates the v-pipe zip distribution'
        group "v-pipe"
        dependsOn "copyLibsJRE_${os}"
        String distDir = "$buildDir/dist/$os"
        from "$distDir/v-pipe-${vPipeRelease()}"
    }
}

task createDistribution_ALL {
    description "creates all .zip distributions for win, linux and macos"
    dependsOn createDistribution("windows"), createDistribution("macos"),createDistribution("linux")
    group "v-pipe"
}


// gradle __deployToDropbox --continuous
// gradlew.bat __deployToDropbox --continuous
task __deployToDropbox {
    group "v-pipe"
    description "DEPLOY RELEASES! make sure to adapt dropbox path in task."

    dependsOn createDistribution_ALL
    doLast {
        copy {

            def dropboxPath
            switch (osName) {
                case "macos":
                    dropboxPath = "/Users/benno/Dropbox (VundS)/VundS/A_Leistungsteams/A_02_Leistungserstellung/A_0205_Produkte/01_CCPM/06_V-Pipe/v-pipe-releases"
                    break
                case "windows":
                    dropboxPath = "C:\\Users\\loeff\\Dropbox (VundS)\\VundS/A_Leistungsteams/A_02_Leistungserstellung/A_0205_Produkte/01_CCPM/06_V-Pipe/v-pipe-releases"
                    break
                default:
                    dropboxPath = "INVALID! $osName: DONT DEPLOY FROM HERE."
            }
            if (! dropboxPath.startsWith("INVALID")) {
                String distributionsDir = "$buildDir/distributions/"
                from distributionsDir
                into dropboxPath
            } else {
                println dropboxPath
            }
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'application.MainGui'
    }
}

// maybe useful for getting git checkout done...
// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html

// EXPERIMENTAL
task buildNativeImage(type: Exec) {
    workingDir "$projectDir/build/dist/v-pipe/lib" //wrong!!!
    if (getOsName() == "windows") {
        commandLine '%comspec% /k "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsx86_amd64.bat"', '/c', '..\\..\\..\\..\\buildNativeImage.bat'
    } else {
        //commandLine 'sh', '-c', 'buildNativeImage.sh'
    }
}






