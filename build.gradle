/*
 * User guide available at https://docs.gradle.org/4.0/userguide/tutorial_groovy_projects.html
 */

import org.gradle.internal.os.OperatingSystem

//apply plugin: 'idea'
//apply plugin: 'groovy'
//apply plugin: 'edu.sc.seis.launch4j'

plugins {
    id 'idea'
    id 'groovy'
    id 'edu.sc.seis.launch4j' version '2.4.6'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}


dependencies {
    implementation 'joda-time:joda-time:2.10.6'
    implementation 'org.codehaus.groovy:groovy-all:2.4.10'
    //implementation "org.codehaus.groovy:groovy-all:2.5.7"
    implementation 'org.tinylog:tinylog-impl:2.1.2'
    implementation 'org.tinylog:tinylog-api:2.1.2'
    implementation name: 'flatlaf-0.37'
    implementation name: 'miglayout-4.0-swing' //ADD LOCAL LIB...
    implementation group: 'org.codehaus.gpars', name: 'gpars', version: '1.2.1' //ADD LOCAL LIB...

    //implementation 'net.java.balloontip:balloontip:1.2.4.1'

    testCompile 'junit:junit:4.12'

    //testCompile "org.spockframework:spock-core:1.3-groovy-2.5"
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.3-groovy-2.4'
}

launch4j {
    mainClassName = 'application.Main'
    headerType='console'
    bundledJrePath='jre'
}


task createGui(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
    outfile = 'v-pipe-gui.exe'
    mainClassName = 'application.MainGui'
    //jvmOptions =['-Dsun.java2d.uiScale=1.5'] // does only work with java9 properly

}

/**
 * set that to local copy
 */
def jre = "jre"
def jrePath ="NOT SET YET"

println "native os.name = " + System.getProperty("os.name").toLowerCase()

def getOsName() {
    String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("linux")) {
        return ("linux");
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return ("macos");
    } else if (osName.contains("windows")) {
        return ("windows");
    } else if (osName.contains("sunos") || osName.contains("solaris")) {
        return ("solaris");
    } else if (osName.contains("freebsd")) {
        return ("freebsd");
    }
    return ("unix");
}

if (getOsName() == "linux") {
    // Consider Linux.
    println "NO JRE YET for Linux"
    Thread.sleep(10000)
} else if (getOsName() == "windows") {
    // Consider Windows.
    jrePath = "C:\\Program Files\\Java\\jre1.8.0_172" // WIN11
    println "jre for WIN: " + jrePath
} else if (getOsName() == "macos") {
    // Consider OS X.
    jrePath = "/Users/benno/Library/Java/JavaVirtualMachines/liberica-1.8.0_322" // macos
    println "jre for macos: " + jrePath
} else {
    // Unknown OS.
    println "*********  Unknown OS  *********"
    Thread.sleep(10000)

}


//def jrePath = "C:\\Program Files\\Java\\jre1.8.0_172" // WIN11
//def jrePath = "C:\\Program Files\\Java\\jre-9.0.4" // does not scale so fine in the Grid-Panel...
//def jrePath = "/Users/benno/Library/Java/JavaVirtualMachines/liberica-1.8.0_322" // macos
def tempDist = "$buildDir/dist/v-pipe"
def exampleDir = "$tempDist/bsp-daten"

task copyExeLibsJRE {
    //dependsOn createExe, createGui
    dependsOn createAllExecutables
    
    description "copies jre, exe and lib to $tempDist"
    group "v-pipe"

    doFirst {
        delete tempDist
        mkdir tempDist

        def fs = new File("ersterStart.md")
        fs.delete()
        fs.createNewFile()
        fs << "ein Hinweis fÃ¼r v-pipe, dass der erste Start noch bevorsteht"
    }
    doLast {
        copy {
            from "$buildDir/launch4j"
            into tempDist
        }

        copy {
            from "bsp-daten"
            into exampleDir
        }

/*
        copy {
            from "bsp-daten/Projekt-Start-End-Abt-Kapa.txt"
            into exampleDir
        }

        copy {
            from "bsp-daten/Projekt-Verschiebung.txt"
            into exampleDir
        }

        copy {
            from "bsp-daten/Integrations-Phasen.txt"
            into exampleDir
        }

        copy {
            from "bsp-daten/v-pipe-Auswertung.xlsx"
            into exampleDir
        }
*/
        copy {
            from "Readme.md"
            into tempDist
        }

        copy {
            from "Readme.html.url"
            into tempDist
        }

        copy {
            from "Referenz.html"
            into tempDist
        }
/*
        copy {
            from "bsp-daten/v-pipe-Auswertung.xlsx"
            into exampleDir
        }
*/
        copy {
            from "ersterStart.md"
            into tempDist
        }

        copy {
            from "v-pipe-macos.sh"
            into tempDist
        }

        //if(!new File("$buildDir/dist/v-pipe/$jre").exists()) {
        copy {
            println"copy JRE... may take a while ($jrePath)"
            println"to ($tempDist)"
            from jrePath
            into "$tempDist/$jre"
        }
        //}
    }
}

task createDistribution(type: Zip) {
    description 'creates the v-pipe zip distribution'
    group "v-pipe"
    dependsOn copyExeLibsJRE
    from "$buildDir/dist"
}






