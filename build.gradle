/*
 * User guide available at https://docs.gradle.org/4.0/userguide/tutorial_groovy_projects.html
 */

/*
 * fat jar: does not work.
 * so _instead_: create dist with Launch4J
 * and delete the exe files finally.
 */

//import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask

plugins {
    id 'idea'
    id 'groovy'
    //id 'edu.sc.seis.launch4j' version '2.4.6'
    id 'com.github.johnrengelman.shadow' version '4.0.4'

}

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

dependencies {
    implementation 'org.apache.ivy:ivy:2.5.0' // for plugins apache excel adapter
    implementation 'joda-time:joda-time:2.10.14'
    implementation 'org.codehaus.groovy:groovy-all:3.0.11'
    implementation group: 'org.codehaus.groovy', name: 'groovy-dateutil', version: '3.0.8'
    implementation group: 'org.codehaus.groovy', name: 'groovy-yaml', version: '3.0.8'
    implementation 'org.tinylog:tinylog-impl:2.4.1'
    implementation 'org.tinylog:tinylog-api:2.4.1'
    implementation name: 'flatlaf-0.37'
    implementation name: 'miglayout-4.0-swing' //ADD LOCAL LIB... it does not download...
    implementation group: 'org.codehaus.gpars', name: 'gpars', version: '1.2.1'
    implementation 'org.pcollections:pcollections:3.1.4'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.23'


    testImplementation 'junit:junit:4.13.2'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.0-groovy-3.0'
}

/*

launch4j {
    mainClassName = 'application.GuiMain'
    headerType='console'
    bundledJrePath='jre'
}


task createGui(type: Launch4jLibraryTask) {
    outfile = 'v-pipe-gui.exe'
    mainClassName = 'application.MainGui'
}

 */


/**
 * set that to local copy
 */
def jre = "jre"
def jrePath ="NOT SET YET"

println "native os.name = " + System.getProperty("os.name").toLowerCase()

static def getOsName() {
    String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("linux")) {
        return ("linux")
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return ("macos")
    } else if (osName.contains("windows")) {
        return ("windows")
    } else if (osName.contains("sunos") || osName.contains("solaris")) {
        return ("solaris")
    } else if (osName.contains("freebsd")) {
        return ("freebsd")
    }
    return ("unix")
}

if (getOsName() == "linux") {
    // Consider Linux.
    jrePath ="/home/benno/.sdkman/candidates/java/11.0.12-open"
    println "jre for linux: " + jrePath
} else if (getOsName() == "windows") {
    // Consider Windows.
    jrePath = "C:\\Program Files\\Java\\jdk-11.0.12"// WIN11
    println "jre for WIN: " + jrePath
} else if (getOsName() == "macos") {
    // Consider OS X.
    jrePath = "/Users/benno/.sdkman/candidates/java/11.0.15-librca" // macos
    println "jre for macos: " + jrePath
} else {
    // Unknown OS.
    println "ERROR... *********  Unknown or wrong OS  *********"
    println getOsName()
    Thread.sleep(10000)
}



def version = rootProject.file('version.txt').text.trim()
println "VERSION: " + version
def distDir = "$buildDir/dist"
def releaseDir = "$distDir/v-pipe-" + version
def exampleDir = "$releaseDir/bsp-daten"
def newModelDir = "$releaseDir/new-model"

task copyExeLibsJRE {
    //dependsOn createExe, createGui
    dependsOn test
    dependsOn shadowJar

    description "copies jre, exe and lib to $releaseDir"
    group "v-pipe"

    doFirst {

        delete distDir
        delete releaseDir
        mkdir releaseDir

        def fs = new File("ersterStart.md")
        fs.delete()
        fs.createNewFile()
        fs << "ein Hinweis fÃ¼r v-pipe, dass der erste Start noch bevorsteht"
    }
    doLast {
        /*
        copy {
            from "$buildDir/launch4j"
            into releaseDir
        }*/

        copy {
            from "bsp-daten"
            into exampleDir
        }

        copy {
            from "new-model"
            into newModelDir
        }

/*
        copy {
            from "bsp-daten/Projekt-Start-End-Abt-Kapa.txt"
            into exampleDir
        }

        copy {
            from "bsp-daten/Projekt-Verschiebung.txt"
            into exampleDir
        }

        copy {
            from "bsp-daten/Integrations-Phasen.txt"
            into exampleDir
        }

        copy {
            from "bsp-daten/v-pipe-Auswertung.xlsx"
            into exampleDir
        }
*/
        copy {
            from "version.txt"
            into releaseDir
        }
        copy {
            from "Readme.md"
            into releaseDir
        }

        copy {
            from "dock-icon.png"
            into releaseDir
        }

        copy {
            from "Readme.html.url"
            into releaseDir
        }

        copy {
            from "Referenz.html"
            into releaseDir
        }
/*
        copy {
            from "bsp-daten/v-pipe-Auswertung.xlsx"
            into exampleDir
        }
*/
        copy {
            from "ersterStart.md"
            into releaseDir
        }

        copy {
            from "v-pipe-macos.sh.command"
            into releaseDir
        }

        copy {
            from "v-pipe-linux.sh"
            into releaseDir
        }

        copy {
            from "v-pipe-win.bat"
            into releaseDir
        }

        //if(!new File("$buildDir/dist/v-pipe/$jre").exists()) {
        copy {
            println"copy JRE... may take a while ($jrePath)"
            println"to ($releaseDir)"
            from jrePath
            into "$releaseDir/$jre"
        }

        //delete "$releaseDir/v-pipe.exe"
        //delete "$releaseDir/v-pipe-gui.exe"


        // tried with FAT JAR... (shadowJar)
        copy {
            from "build/libs/v-pipe.jar"
            into "$releaseDir/lib/"
        }

        //}
    }
}


task createDistribution(type: Zip) {
    archiveName 'v-pipe-' +version+ '.zip' // will be named archiveFileName in future releases
    description 'creates the v-pipe zip distribution'
    group "v-pipe"
    dependsOn copyExeLibsJRE
    from "$distDir/v-pipe-$version"
}


jar {
    manifest {
        attributes 'Main-Class': 'application.MainGui'
    }
}

// EXPERIMENTAL
task buildNativeImage(type: Exec) {
    workingDir "$projectDir/build/dist/v-pipe/lib" //wrong!!!
    if (getOsName() == "windows") {
        commandLine '%comspec% /k "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsx86_amd64.bat"', '/c', '..\\..\\..\\..\\buildNativeImage.bat'
    } else {
        //commandLine 'sh', '-c', 'buildNativeImage.sh'
    }
}






